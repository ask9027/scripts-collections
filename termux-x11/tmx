#!/data/data/com.termux/files/usr/bin/bash
set -e -u

set_color(){
	REDB='\033[41m'
	RED='\033[31m'
	GREEN='\033[32m'
	BLUE='\033[34m'
	CYAN='\033[36m'
	RESET='\033[0m'
}

trap ctrl_c INT
extra=""

check_server(){
    if [ ! -z "$(pidof app_process)" ]; then
    	local server_pid=$(pidof app_process)
        printf "${RED}XServer is Already running at ${server_pid}"; echo
        printf "${BLUE}Terminating XServer of ${server_pid}$(kill $server_pid)${RESET}"; echo
    fi
}

ctrl_c() {
    echo ""
	if is_root; then
		rm -rf ${TMPDIR}/.X*
        printf "${REDB}Setting up SELinux to $(su -c setenforce 1)$(su -c getenforce)${RESET}"; echo
    else
		printf "${RED}Killing pulseaudio$(pulseaudio -k 2>/dev/null)${RESET}"; echo
	fi
	printf "${GREEN}Leaving...${RESET}"; echo
}

setup_audio() {
    if ! command -v "pulseaudio" &>/dev/null; then
        echo "pulseaudio not found"
		echo "installing it now."
        apt update && apt install pulseaudio -y
    fi
}

start_audio(){
	setup_audio
	printf "${CYAN}Starting pulseaudio${RESET}"; echo
	printf "${RED}Killing pulseaudio if running$(pulseaudio -k 2>/dev/null)${RESET}"; echo
	pulseaudio --start --load="module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1" --exit-idle-time=-1 -D
}

usage(){
	printf "${CYAN}Usage: $0 [OPTIONS]"
	echo "Options:"
	echo " -h, --help			Display this Help message."
	echo " -help				Display X Server Help message."
	echo " --debug			Use this if want Verbose output."
	printf " Other options will execute in x server, use -help for x server options.${RESET}"; echo
}

handle_options(){
	while (($# >= 1)); do
		case $1 in
			-h | --help)
				usage
				exit 0
				;;
			--debug)
				export TERMUX_X11_DEBUG=1
				echo "Verbose Enabled"
				;;
			*)
				extra=$@
				printf "X Server Options: ${CYAN}${extra}${RESET}"; echo
				break
				;;
		esac
		shift
	done
}

is_root(){
    if [ "$(id -u)" = "0" ]; then return 0; else return 1; fi
}

setup(){
	local PREFIX=/data/data/com.termux/files/usr
    local x11repo="${PREFIX}/etc/apt/sources.list.d/x11.list"
    local loader="${PREFIX}/libexec/termux-x11/loader.apk"
    if [ ! -f $x11repo ]; then
		echo "x11-repo is not enabled, enabling now."
        apt update && apt install x11-repo -y
    fi
    if [ ! -f $loader ]; then
        echo "termux-x11 not installed, imstalling now."
        apt update && apt install termux-x11* -y
    fi
	export CLASSPATH=$loader
	unset LD_LIBRARY_PATH LD_PRELOAD
	/system/bin/app_process / com.termux.x11.Loader $extra
}

setup_root(){
	## set SeLinux to permissive to work with root
    local enforce="setenforce 1"
    local permissive="setenforce 0"
    local getenforce="getenforce"

	printf "${REDB}SELinux is $($getenforce)${RESET}"; echo
	printf "${REDB}Setting up SELinux to $($permissive)$($getenforce)${RESET}"; echo

	# set envs
    # export TMPDIR=/tmp # path of chroot tmp if want use chroot
	# it will use termux-app TMPDIR
    export XKB_CONFIG_ROOT="/data/local/tmp/ubuntu/usr/share/X11/xkb"
    export CLASSPATH="$(/system/bin/pm path com.termux.x11 | cut -d: -f2)"
	/system/bin/app_process / com.termux.x11.CmdEntryPoint $extra
}

startX11() {
    printf "${GREEN}Starting Termux-x11${RESET}"; echo
	printf "${REDB}Clearing old logcat$(logcat -c)${RESET}"; echo
	if is_root; then
		echo "Running Termux-X11 With ROOT"
		$(logcat -c)
		setup_root
	else
		start_audio
		echo "Running Termux-X11"
		setup
    fi
}

set_color
handle_options "$@"
check_server
startX11
